# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import insultingServer_pb2 as insultingServer__pb2


class InsultingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddInsult = channel.unary_unary(
                '/InsultingService/AddInsult',
                request_serializer=insultingServer__pb2.Insult.SerializeToString,
                response_deserializer=insultingServer__pb2.Empty.FromString,
                )
        self.GetInsults = channel.unary_unary(
                '/InsultingService/GetInsults',
                request_serializer=insultingServer__pb2.Empty.SerializeToString,
                response_deserializer=insultingServer__pb2.Insults.FromString,
                )
        self.Insultme = channel.unary_unary(
                '/InsultingService/Insultme',
                request_serializer=insultingServer__pb2.Empty.SerializeToString,
                response_deserializer=insultingServer__pb2.Insult.FromString,
                )


class InsultingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddInsult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInsults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insultme(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InsultingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddInsult': grpc.unary_unary_rpc_method_handler(
                    servicer.AddInsult,
                    request_deserializer=insultingServer__pb2.Insult.FromString,
                    response_serializer=insultingServer__pb2.Empty.SerializeToString,
            ),
            'GetInsults': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInsults,
                    request_deserializer=insultingServer__pb2.Empty.FromString,
                    response_serializer=insultingServer__pb2.Insults.SerializeToString,
            ),
            'Insultme': grpc.unary_unary_rpc_method_handler(
                    servicer.Insultme,
                    request_deserializer=insultingServer__pb2.Empty.FromString,
                    response_serializer=insultingServer__pb2.Insult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'InsultingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InsultingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddInsult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InsultingService/AddInsult',
            insultingServer__pb2.Insult.SerializeToString,
            insultingServer__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInsults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InsultingService/GetInsults',
            insultingServer__pb2.Empty.SerializeToString,
            insultingServer__pb2.Insults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Insultme(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InsultingService/Insultme',
            insultingServer__pb2.Empty.SerializeToString,
            insultingServer__pb2.Insult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
